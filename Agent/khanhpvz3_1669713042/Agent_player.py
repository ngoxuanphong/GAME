# -*- coding: utf-8 -*-
"""Agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p5LlQJDX7Gx0yUcHrTliFTda8DpNgGss
"""

import sys, os
from setup import game_name
sys.path.append(os.path.abspath(f"base/{game_name}"))
from env import *
import numpy as np
from numba import njit
from numba.typed import List
import random

@njit()
def sigmoid(x):
    sig = 1 / (1 + np.exp(-x))
    return sig

@njit()
def silu(x, theda = 1.0):
    return x * sigmoid(theda *x)
@njit()
def relu6(x):
    return np.minimum(np.maximum(0, x),6)
    
@njit()
def neural_network(play_state, file_temp):
    if 55 <  getStateSize() < 70 or getStateSize() > 300 : # TLMN , TLMN_v2 , CENTURY
        matran1 = np.dot(play_state,file_temp[0])
        matran1 = 1 / (1 + np.exp(-matran1))
        matran21 = np.dot(matran1,file_temp[1])
        matran21 *= (matran21 > 0)
        matran2 = np.dot(matran21, file_temp[2])
        return matran2    
    elif 120 < getStateSize()  < 170:# SPLENDOr SPlendor_view_only
        matrix1 = np.dot(play_state,file_temp[0])
        matrixRL1 = np.tanh(matrix1)
        matrix2 = np.dot(matrixRL1,file_temp[1])
        matrixRL2 = relu6(matrix2)
        all_action_val = np.dot(matrixRL2,file_temp[2])
        return all_action_val  
    elif 170 < getStateSize() < 250  : #SHERIFF 
        matran1 = np.dot(play_state, file_temp[0])
        matran1 = silu(matran1, theda = 1.0)
        matran2 = np.dot(matran1, file_temp[1])
        return matran2
    else :#SUSHIGO-main, MACHIKOR0
        matran1 = np.dot(play_state, file_temp[0])
        matran1 = np.tanh(matran1)
        matran2 = np.dot(matran1, file_temp[1])
        return matran2

def DataAgent():
  perx = List()
  if getStateSize() <55 or 70 < getStateSize() < 120: # SushiGo #MACHIKORO 
      perx.append((np.random.random((getStateSize(),100))*2 -0.6))
      perx.append(np.random.random((100,getActionSize())))
  elif 55 < getStateSize() < 70 :    # TLMN , TLMN_v2 
      perx.append((np.random.random((getStateSize(),80))*2 -0.6))
      perx.append(np.random.random((80, 50)))
      perx.append(np.random.random((50,getActionSize())))
  elif 120 <getStateSize()  <170:  # Splendor , Splendor_view_only
      perx.append((np.random.random((getStateSize(),100))*2 -0.6))
      perx.append(np.random.random((100, 50)))
      perx.append(np.random.random((50,getActionSize())))
  elif 170 < getStateSize() < 250: # SHERIFF
      perx.append((np.random.random((getStateSize(),200))*2 -0.6))
      perx.append(np.random.random((200,getActionSize())))
  elif getStateSize() > 250  :   # CENTURY
      perx.append((np.random.random((getStateSize(),300))*2 -0.6))
      perx.append(np.random.random((300, 150)))
      perx.append(np.random.random((150,getActionSize())))


  perx.append(np.zeros((1,1)))
  perx.append(np.zeros((1,1)))
  perx.append(np.zeros((1,1)))
  return perx
perx = DataAgent()
@njit()
def Agent(play_state,file_temp,file_per):
    a = getValidActions(play_state)
    a = np.where(a == 1)[0]
    if getStateSize() <55 or 70 < getStateSize() < 120:# SushiGo #MACHIKORO 
        k = 90/100
    elif 55 < getStateSize() < 70 : # TLMN , TLMN_v2 
      if getActionSize() >400:
        k = 48/100
      else:
        k = 60/100
    elif 120 <getStateSize()  <170:# Splendor , Splendor_view_only
      if getActionSize() >41:
        k = 90/100
      else:
        k = 56/100
    elif 170 < getStateSize() < 250: # SHERIFF      
        k = 80/100
    elif getStateSize() > 250  :   # CENTURY
        k = 93/100
    if (file_per[3][0]/(file_per[4][0] +file_per[3][0])) <k  and (file_per[4][0] +file_per[3][0]) >10:

      if getStateSize() <55 or 70 < getStateSize() < 120: # SushiGo #MACHIKORO 
          file_per[0]= ((np.random.random((getStateSize(),100))*2 -0.6))
          file_per[1]= (np.random.random((100,getActionSize())))
      elif 55 < getStateSize() < 70 :    # TLMN , TLMN_v2 
          file_per[0]= ((np.random.random((getStateSize(),80))*2 -0.6))
          file_per[1] = (np.random.random((80, 50)))
          file_per[2]= (np.random.random((50,getActionSize())))
      elif 120 <getStateSize()  <170:  # Splendor , Splendor_view_only
          file_per[0] = (np.random.random((getStateSize(),100))*2 -0.6)
          file_per[1] = np.random.random((100, 50))
          file_per[2] = np.random.random((50,getActionSize()))
      elif 170 < getStateSize() < 250: # SHERIFF
          file_per[0]= ((np.random.random((getStateSize(),200))*2 -0.6))
          file_per[1]= (np.random.random((200,getActionSize())))
      elif getStateSize() > 250  :   # CENTURY
          file_per[0] = ((np.random.random((getStateSize(),300))*2 -0.6))
          file_per[1] = (np.random.random((300, 150)))
          file_per[2]=(np.random.random((150,getActionSize())))

      file_per[3] = np.zeros((1,1))
      file_per[4] = np.zeros((1,1))

    matran2 = neural_network(play_state, file_per)

    max = 0
    action_max = a[random.randrange(len(a))]
    for act in a:
        if matran2[act] > max:
            max = matran2[act]
            action_max = act
    if getReward(play_state) == 1:
        file_per[3][0]+= 1

    if getReward(play_state) == 0:
        file_per[4][0]+= 1

    return action_max,file_temp,file_per


count1, per2 = numba_main_2(Agent, 1000, perx,0)