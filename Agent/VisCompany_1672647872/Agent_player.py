{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPTW7FScvbeK8xI8vPKjjiP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Uh6fd6nUh41D"},"outputs":[],"source":["import numpy as np\n","import sys, os\n","game_name = sys.argv[1]\n","sys.path.append(os.path.abspath(f\"base/{sys.argv[1]}\"))\n","from env import *\n","def DataAgent():\n","    return [np.random.choice(np.arange(getActionSize()),size=getActionSize(),replace=False) * 1.0,\n","       np.zeros(getActionSize()),\n","       np.zeros(10) #2: 0 là mode (0 - train, 1 - test, 2 - per) , 1 là số trận đã thắng (data), 2 là tỉ lệ test thắng max, 3 là số lần không vượt max, 4 là số ván chơi test, 5 là số ván win test\n","       ]\n","@njit()\n","def Agent(state,per):\n","    actions = getValidActions(state)\n","    win = getReward(state)\n","    mode = per[2][0]\n","    if mode == 0:\n","        output = actions * per[0] + actions\n","        action = np.argmax(output)        \n","        if win == 1:\n","            per[1] += per[0]\n","            per[2][1] += 1\n","            if per[2][1] % 1000 == 0:\n","                per[2][0] = 1\n","            # per[0] = np.random.choice(np.arange(getActionSize()),size=getActionSize(),replace=False) * 1.0\n","        if win == 0:\n","            per[0] = np.random.choice(np.arange(getActionSize()),size=getActionSize(),replace=False) * 1.0\n","    if mode == 1:\n","        bias = per[1]/np.max(per[1])\n","        output = actions * bias + actions\n","        action = np.argmax(output)\n","        if win != -1:\n","            per[2][4] += 1\n","            if win == 1:\n","                per[2][5] += 1\n","            if per[2][4] == 1000000:\n","                win_rate = per[2][5]/per[2][4]\n","                per[2][5] = 0\n","                per[2][4] = 0\n","                if win_rate > per[2][2]:\n","                    per[2][2] = win_rate\n","                    per[2][3] = 0\n","                else:\n","                    per[2][3] += 1\n","                    # print(\"1 lần không vượt, tổng là\", per[2][3])\n","                if per[2][3] == 3:\n","                    per[2][0] = 2\n","                else:\n","                    per[2][0] = 0\n","    if mode == 2:\n","        bias = per[1]/np.max(per[1])\n","        output = actions * bias + actions\n","        action = np.argmax(output)\n","    return action,per"]}]}